#!/bin/bash

# change these back to progrium/ once builds are current there
readonly AMBASSADORD_IMAGE="binocarlos/ambassadord"
readonly REGISTRATOR_IMAGE="binocarlos/registrator"

readonly ETCD_IMAGE="coreos/etcd"
readonly ETCDCTL_IMAGE="binocarlos/etcdctl"
readonly SMESH_IMAGE="binocarlos/smesh"

if [ -f ~/.arpanetrc ]; then
	source ~/.arpanetrc
fi
export DOCKER_URL=${DOCKER_URL:="https://get.docker.io/ubuntu/"}
export DOCKER_PORT=${DOCKER_PORT:=2375}
export ETCD_PORT=${ETCD_PORT:=4001}
export ETCD_PEERPORT=${ETCD_PEERPORT:=7001}
export ETCD_PATH=${ETCD_PATH:="/arpanet"}
export ETCD_NAME=${ETCD_NAME:="arpanet_etcd"}
export AMBASSADOR_NAME=${AMBASSADOR_NAME:="arpanet_backends"}
export REGISTRATOR_NAME=${REGISTRATOR_NAME:="arpanet_registrator"}

# INSTALL
check-environment(){
	if [ -z $HOSTNAME ]; then
		echo "HOSTNAME variable needed"
		exit 1
	fi
	if [ -z $ARPANET_IP ]; then
		echo "ARPANET_IP variable needed"
		exit 1
	fi
	if [ -z $ARPANET_MASTERS ]; then
		echo "ARPANET_MASTERS variable needed"
		exit 1
	fi
	if [ -z $ARPANET_ETCD ]; then
		IFS=',' read -a masters <<< "$ARPANET_MASTERS"
		ARPANET_ETCD="${masters[0]}:$ETCD_PORT"
	fi
}

install-docker(){
	curl -sSL $DOCKER_URL | sudo sh
	sysctl -w net.ipv4.ip_forward=1
	echo "DOCKER_OPTS='-H unix:///var/run/docker.sock -H tcp://$ARPANET_IP:$DOCKER_PORT'" > /etc/default/docker
	service docker restart
	sleep 2
}

install-core() {	
	install-docker
}

install-slave() {
	sleep 1
	docker pull $AMBASSADORD_IMAGE
	sleep 1
	docker pull $REGISTRATOR_IMAGE
}

install-master() {
	sleep 1
	docker pull $ETCD_IMAGE
	sleep 1
	docker pull $SMESH_IMAGE
}

cmd-install() {
	check-environment
	case "$1" in	
	core)               shift; install-core $@;;
	slave)              shift; install-slave $@;;
	master)             shift; install-master $@;;
  *)
		echo "usage: arpanet install <mode>"
	;;
	esac
}

start-registrator(){

	running=$(docker ps | grep arpanet_registrator)
	if [ -n "$running" ]; then
		echo "arpanet registrator is already running"
		exit 1
	fi

	docker run -d \
		--name $REGISTRATOR_NAME \
    -v /var/run/docker.sock:/tmp/docker.sock \
    -h $HOSTNAME $REGISTRATOR_IMAGE -ip=$ARPANET_IP etcd://$ARPANET_ETCD$ETCD_PATH/network
}

start-ambassadord(){

	running=$(docker ps | grep arpanet_backends)
	if [ -n "$running" ]; then
		echo "arpanet ambassadord is already running"
		exit 1
	fi

	docker run -d \
		--name $AMBASSADOR_NAME \
		-v /var/run/docker.sock:/var/run/docker.sock \
		$AMBASSADORD_IMAGE --omnimode

	docker run --rm \
		--privileged \
		--net container:$AMBASSADOR_NAME \
		$AMBASSADORD_IMAGE --setup-iptables

}

slave-start() {
	start-ambassadord
	start-registrator
}

slave-stop() {
	docker stop arpanet_registrator && docker rm arpanet_registrator
	docker stop arpanet_backends && docker rm arpanet_backends
}

cmd-slave() {
	check-environment
	case "$1" in
	start)              shift; slave-start $@;;
	stop)               shift; slave-stop $@;;
  *)
		echo "usage: arpanet slave (start|stop)"
	;;
	esac
}

etcd-start() {
	if [ -z "$1" ]; then
		echo "usage: arpanet master start --peers | --token [OPTIONS}"
		exit 1
	fi
	running=$(docker ps | grep arpanetetcd)
	if [ -n "$running" ]; then
		echo "arpanet etcd is already running"
		exit 1
	fi
	$(docker run --rm binocarlos/smesh start --name $ETCD_NAME --hostname $HOSTNAME --address $ARPANET_IP --port $ETCD_PORT --peerport $ETCD_PEERPORT --dockerargs="-e SERVICE_4001_NAME=arpanet_etcd -e SERVICE_7001_NAME=arpanet_etcd_peer" $@)
}

etcd-stop() {
	docker stop arpanet_etcd && docker rm arpanet_etcd
}

master-start() {
	etcd-start $@
}

master-stop() {
	etcd-stop $@
}

cmd-master() {
	check-environment
	case "$1" in	
	start)              shift; master-start $@;;
	stop)               shift; master-stop $@;;
  *)
		echo "usage: arpanet master (start|stop)"
	;;
	esac
}

cmd-etcdctl() {
	check-environment
	docker run --rm -ti $ETCDCTL_IMAGE --peers $ARPANET_IP:$ETCD_PORT $@
}

cmd-hosts() {
	check-environment
	curl -L http://$ARPANET_ETCD/v2/keys/_etcd/machines
}

cmd-help() {
cat <<EOF

Usage: arpanet COMMAND [options]

Commands:

  install    (master|slave)             Install master or slave components
  master     (start|stop)               Start|Stop the master
  slave      (start|stop)               Start|Stop the slave
  etcdctl                               Run etcdctl against the local master
  hosts                                 etcd ls /_etcd/machines

EOF
}

main() {
	case "$1" in
	install)            shift; cmd-install $@;;
	master)             shift; cmd-master $@;;
	slave)              shift; cmd-slave $@;;
	etcdctl)            shift; cmd-etcdctl $@;;
  hosts)              shift; cmd-hosts $@;;
	*)                  cmd-help $@;;
	esac
}

main "$@"