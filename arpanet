#!/bin/bash

# change ambassadord to progrium when updated
export CONSUL_IMAGE=${ETCD_IMAGE:="progrium/consul"}
export CADVISOR_IMAGE=${CADVISOR_IMAGE:="google/cadvisor"}
export AMBASSADORD_IMAGE=${AMBASSADORD_IMAGE:="binocarlos/ambassadord"}
export REGISTRATOR_IMAGE=${REGISTRATOR_IMAGE:="progrium/registrator"}
export FLEETSTREET_IMAGE=${FLEETSTREET_IMAGE:="binocarlos/fleetstreet"}

export CONSUL_NAME=${CONSUL_NAME:="arpanet_consul"}
export CADVISOR_NAME=${CADVISOR_NAME:="arpanet_cadvisor"}
export AMBASSADOR_NAME=${AMBASSADOR_NAME:="arpanet_backends"}
export REGISTRATOR_NAME=${REGISTRATOR_NAME:="arpanet_registrator"}
export FLEETSTREET_NAME=${FLEETSTREET_NAME:="arpanet_fleetstreet"}

export DOCKER_PORT=${DOCKER_PORT:=2375}
export CADVISOR_PORT=${CADVISOR_PORT:=8080}
export CONSUL_PORT=${CONSUL_PORT:=8500}
export CONSUL_EXPECT=${CONSUL_EXPECT:=3}
export CONSUL_DATA=${CONSUL_DATA:=/mnt/arpanet-consul}
export CONSUL_KV_PATH=${CONSUL_KV_PATH:=/arpanet}

# INSTALL
check-environment(){
	if [ -z $HOSTNAME ]; then
		echo "HOSTNAME variable needed"
		exit 1
	fi
	if [ -z $ARPANET_IP ]; then
		echo "ARPANET_IP variable needed"
		exit 1
	fi
}

cmd-opts(){
	if [[ "$1" == "docker" ]]; then
		echo "-H unix:///var/run/docker.sock -H tcp://$ARPANET_IP:$DOCKER_PORT --dns 172.17.42.1 --dns 8.8.8.8 --dns-search service.consul"
	elif [[ "$1" == "data" ]]; then
		echo $CONSUL_DATA
	fi
}

cmd-pull() {
	docker pull $CONSUL_IMAGE
	sleep 1
	docker pull $CADVISOR_IMAGE
	sleep 1
	docker pull $AMBASSADORD_IMAGE
	sleep 1
	docker pull $REGISTRATOR_IMAGE
	sleep 1
	docker pull $FLEETSTREET_IMAGE
}

check-running(){
	checkfor="$1"; shift
	running=$(docker ps | grep $checkfor)
	if [ -n "$running" ]; then
		echo "$1 is already running"
		exit 1
	fi
}

start-consul(){
	local mode="$1"; shift
	local joinip="$1"; shift
	local servicename="$CONSUL_NAME.$HOSTNAME"
	check-running $servicename
	bridge_ip=$(ip ro | awk '/^default/{print $3}')
	consul_args=""

	if [[ -z $mode ]]; then
		>&2 echo "usage: arpanet start boot|master|slave [JOINIP]"
		exit 1
	fi

	if [[ "$mode" == "boot" ]]; then
		if [[ -z $joinip ]]; then
			>&2 echo "boot mode does not take a JOINIP"
			exit 1
		fi
		consul_args="-server -bootstrap-expect $CONSUL_EXPECT"
	elif [[ "$mode" == "master" ]]; then
		if [[ -z $joinip ]]; then
			>&2 echo "master mode needs a JOINIP"
			exit 1
		fi
		consul_args="-server -join $joinip"
	else
		if [[ -z $joinip ]]; then
			>&2 echo "slave mode needs a JOINIP"
			exit 1
		fi
		consul_args="-join $joinip"
	fi

	docker run -d --name $servicename -h $HOSTNAME \
		-v $CONSUL_DATA:/data \
		-p $ARPANET_IP:8300:8300 \
		-p $ARPANET_IP:8301:8301 \
		-p $ARPANET_IP:8301:8301/udp \
		-p $ARPANET_IP:8302:8302 \
		-p $ARPANET_IP:8302:8302/udp \
		-p $ARPANET_IP:8400:8400 \
		-p $ARPANET_IP:$CONSUL_PORT:8500 \
		-p $bridge_ip:53:53/udp \
		$CONSUL_IMAGE -advertise $ARPANET_IP $consul_args
}

start-cadvisor(){
	local servicename="$CADVISOR_NAME.$HOSTNAME"
	check-running $servicename
	docker run -d \
		--name "$servicename" \
		-e "FLEETSTREET_NAME=$servicename" \
		-e "SERVICE_8080_NAME=$CADVISOR_NAME" \
		-v /var/run:/var/run:rw \
		-v /sys:/sys:ro \
		-v /var/lib/docker/:/var/lib/docker:ro \
		-p $ARPANET_IP:$CADVISOR_PORT:8080 $CADVISOR_IMAGE
}


start-registrator(){
	local servicename="$REGISTRATOR_NAME.$HOSTNAME"
	docker run -d \
		--name "$servicename" \
		-e "FLEETSTREET_NAME=$servicename" \
    -v /var/run/docker.sock:/tmp/docker.sock \
    -h $HOSTNAME $REGISTRATOR_IMAGE -ip=$ARPANET_IP consul://$ARPANET_IP:$CONSUL_PORT
}


start-ambassadord(){
	local servicename="$AMBASSADOR_NAME.$HOSTNAME"
	check-running $servicename
	docker run -d \
		--name "$servicename" \
		-e "FLEETSTREET_NAME=$servicename" \
		-v /var/run/docker.sock:/var/run/docker.sock \
		$AMBASSADORD_IMAGE --omnimode

	docker run --rm \
		--privileged \
		--net container:"$AMBASSADOR_NAME.$HOSTNAME" \
		$AMBASSADORD_IMAGE --setup-iptables

}

start-fleetstreet(){
	local servicename="$FLEETSTREET_NAME.$HOSTNAME"
	check-running $servicename
	docker run -d \
		--name "$servicename" \
		-e "FLEETSTREET_NAME=$servicename" \
    -v /var/run/docker.sock:/var/run/docker.sock \
    -h $HOSTNAME $FLEETSTREET_IMAGE -ip=$ARPANET_IP -ensure consul://$ARPANET_IP:$CONSUL_PORT$CONSUL_KV_PATH/containers
}

cmd-start() {
	check-environment
	start-consul $@
	sleep 1
	start-ambassadord
	sleep 1
	start-registrator
	sleep 1
	start-cadvisor
	sleep 1
	start-fleetstreet
	sleep 1
}

stop-service() {
	echo "stop"
	docker stop $1
	echo "remove"
	docker rm $1
}

cmd-stop() {
	stop-service "$CADVISOR_NAME.$HOSTNAME"
	stop-service "$REGISTRATOR_NAME.$HOSTNAME"
	stop-service "$AMBASSADOR_NAME.$HOSTNAME"
	stop-service "$FLEETSTREET_NAME.$HOSTNAME"
	stop-service "$CONSUL_NAME.$HOSTNAME"
}

cmd-help() {
cat <<EOF

Usage: arpanet COMMAND [options]

Commands:

  setup                                 Setup docker for use with arpanet
  pull                                  Pull the required docker images
  start boot|master|slave [JOINIP]      Start arpanet
  stop                                  Stop arpanet
  help                                  Show this message

EOF
}

main() {
	case "$1" in
	opts)               shift; cmd-opts $@;;
  pull)               shift; cmd-pull $@;;
	start)              shift; cmd-start $@;;
	stop)               shift; cmd-stop $@;;
	*)                  cmd-help $@;;
	esac
}

main "$@"