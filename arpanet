#!/bin/bash

if [ -f ~/.arpanetrc ]; then
	source ~/.arpanetrc
fi


export REGISTRATOR_IMAGE=${REGISTRATOR_IMAGE:="progrium/registrator"}
export FLEETSTREET_IMAGE=${FLEETSTREET_IMAGE:="binocarlos/fleetstreet"}
export CADVISOR_IMAGE=${CADVISOR_IMAGE:="google/cadvisor"}
export CONSUL_IMAGE=${ETCD_IMAGE:="progrium/docker-consul"}
# change this back to progrium/ once builds are current there
export AMBASSADORD_IMAGE=${AMBASSADORD_IMAGE:="binocarlos/ambassadord"}

export DOCKER_PORT=${DOCKER_PORT:=2375}
export KV_PATH=${ETCD_PATH:="/arpanet"}

export CONSUL_NAME=${CONSUL_NAME:="arpanet_consul"}
export AMBASSADOR_NAME=${AMBASSADOR_NAME:="arpanet_backends"}
export REGISTRATOR_NAME=${REGISTRATOR_NAME:="arpanet_registrator"}
export FLEETSTREET_NAME=${FLEETSTREET_NAME:="arpanet_fleetstreet"}
export CADVISOR_NAME=${CADVISOR_NAME:="arpanet_cadvisor"}
export CADVISOR_PORT=${CADVISOR_PORT:=8085}

# INSTALL
check-environment(){
	if [ -z $HOSTNAME ]; then
		echo "HOSTNAME variable needed"
		exit 1
	fi
	if [ -z $ARPANET_IP ]; then
		echo "ARPANET_IP variable needed"
		exit 1
	fi
}

configure-docker(){
cat <<EOF
eval echo "DOCKER_OPTS='-H unix:///var/run/docker.sock -H tcp://$ARPANET_IP:$DOCKER_PORT --dns 172.17.42.1 --dns 8.8.8.8 --dns-search service.consul'" > /etc/default/docker && service docker restart
EOF
}

install() {
	check-environment
	sleep 1
	docker pull $REGISTRATOR_IMAGE
	sleep 1
	docker pull $FLEETSTREET_IMAGE
	sleep 1
	docker pull $CADVISOR_IMAGE
	sleep 1
	docker pull $CONSUL_IMAGE
	sleep 1
	docker pull $AMBASSADORD_IMAGE	
}

check-running(){
	checkfor="$1"; shift
	running=$(docker ps | grep $checkfor)
	if [ -n "$running" ]; then
		echo "$1 is already running"
		exit 1
	fi
}

start-consul(){
	local servicename="$CONSUL_NAME.$HOSTNAME"
	check-running $servicename

	#docker run -d \
	#	--name "$servicename" \
	#	-e "FLEETSTREET_NAME=$servicename" \
  #  -v /var/run/docker.sock:/tmp/docker.sock \
  #  -h $HOSTNAME $REGISTRATOR_IMAGE -ip=$ARPANET_IP consul://$ARPANET_IP:8500
}

start-registrator(){
	local servicename="$REGISTRATOR_NAME.$HOSTNAME"


	docker run -d \
		--name "$servicename" \
		-e "FLEETSTREET_NAME=$servicename" \
    -v /var/run/docker.sock:/tmp/docker.sock \
    -h $HOSTNAME $REGISTRATOR_IMAGE -ip=$ARPANET_IP consul://$ARPANET_IP:8500
}

start-fleetstreet(){
	local servicename="$FLEETSTREET_NAME.$HOSTNAME"
	check-running $servicename
	docker run -d \
		--name "$servicename" \
		-e "FLEETSTREET_NAME=$servicename" \
    -v /var/run/docker.sock:/var/run/docker.sock \
    -h $HOSTNAME $FLEETSTREET_IMAGE -ip=$ARPANET_IP -ensure consul://$ARPANET_IP$KV_PATH/containers
}

start-cadvisor(){
	local servicename="$CADVISOR_NAME.$HOSTNAME"
	check-running $servicename
	docker run -d \
		--name "$servicename" \
		-e "FLEETSTREET_NAME=$servicename" \
		-e "SERVICE_8080_NAME=$CADVISOR_NAME" \
		-v /var/run:/var/run:rw \
		-v /sys:/sys:ro \
		-v /var/lib/docker/:/var/lib/docker:ro \
		-p $ARPANET_IP:$CADVISOR_PORT:8080 $CADVISOR_IMAGE
}

start-ambassadord(){
	local servicename="$AMBASSADOR_NAME.$HOSTNAME"
	check-running $servicename
	docker run -d \
		--name "$servicename" \
		-e "FLEETSTREET_NAME=$servicename" \
		-v /var/run/docker.sock:/var/run/docker.sock \
		$AMBASSADORD_IMAGE --omnimode

	docker run --rm \
		--privileged \
		--net container:"$AMBASSADOR_NAME.$HOSTNAME" \
		$AMBASSADORD_IMAGE --setup-iptables

}

cmd-start() {
	check-environment
	start-consul $@
	sleep 1
	start-ambassadord
	start-registrator
	start-cadvisor
	sleep 1
	start-fleetstreet
}

cmd-stop() {
	docker stop "$CADVISOR_NAME.$HOSTNAME" && docker rm "$CADVISOR_NAME.$HOSTNAME"
	docker stop "$REGISTRATOR_NAME.$HOSTNAME" && docker rm "$REGISTRATOR_NAME.$HOSTNAME"
	docker stop "$AMBASSADOR_NAME.$HOSTNAME" && docker rm "$AMBASSADOR_NAME.$HOSTNAME"
	docker stop "$FLEETSTREET_NAME.$HOSTNAME" && docker rm "$FLEETSTREET_NAME.$HOSTNAME"
	docker stop "$CONSUL_NAME.$HOSTNAME" && docker rm "$CONSUL_NAME.$HOSTNAME"
}

cmd-help() {
cat <<EOF

Usage: arpanet COMMAND [options]

Commands:

  install                               Install master or slave components
  start      (master|slave)             Start arpanet
  stop                                  Stop arpanet

EOF
}

main() {
	case "$1" in
	install)            shift; cmd-install $@;;
	start)              shift; cmd-start $@;;
	stop)               shift; cmd-stop $@;;
	*)                  cmd-help $@;;
	esac
}

main "$@"